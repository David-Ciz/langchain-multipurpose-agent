import logging
import os

import uvicorn

from langchain.memory import ConversationBufferMemory
from langchain_community.tools.ddg_search import DuckDuckGoSearchRun
from langchain_community.vectorstores.pinecone import Pinecone
from langchain_experimental.tools import PythonREPLTool
from langchain_openai import OpenAIEmbeddings, ChatOpenAI

import config
from agent_setup import setup_agents_and_tools
from agents.utils import get_api_response
from documentation_loader import update_docs_database
from fastapi import FastAPI, Body
from pydantic import BaseModel

from utils import env_variables_checker
from config import MODEL_NAME, TEMPERATURE, INDEX_NAME

app = FastAPI()
missing_variables = config.load_env()
logger = logging.getLogger("Assistant")

if missing_variables:
    logging.warning(f'warning, you are missing the following env. variables: {missing_variables}')

# memory setup with resetting button.
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True,
                                  output_key="output")
orchestrator_agent = setup_agents_and_tools(memory)

class Prompt(BaseModel):
    text: str


@app.get("/health")
async def health():
    """ Basic checking if the service is running"""
    return {"status": "I'm alive"}


@app.get("/update-docs")
async def update_docs_database_api(documentation_url: Prompt = Body(...)):
    """
    Updates the PINECONE database with new documents when called. It expects the document structure to be
    generated by Sphinx
    :param documentation_url: Optional argument if the url changes. defaults to https://ibm.github.io/ibm-generative-ai/
    """
    update_docs_database(documentation_url.text)


@app.post("/chat")
async def chat_api(prompt: Prompt = Body(...)):
    """
    Chat with the agent through an api by sending prompts
    :param prompt: user question or request
    :return:
    """

    response = get_api_response(orchestrator_agent, prompt)
    return response


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    uvicorn.run("api_interface:app")
