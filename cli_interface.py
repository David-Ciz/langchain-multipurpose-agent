import logging

import click
from langchain.memory import ConversationBufferMemory

import config
from agent_setup import setup_agents_and_tools
from agents.utils import invoke_cli_response
from documentation_loader import update_docs_database

logger = logging.getLogger("Assistant")
missing_variables = config.load_env()
if missing_variables:
    logging.warning(f'warning, you are missing the following env. variables: {missing_variables}')


@click.group()
def cli():
    pass


@cli.command("update-docs")
@click.option("--documentation_url",type=str, default="https://ibm.github.io/ibm-generative-ai/",
              help="Optional argument if the url changes. defaults to https://ibm.github.io/ibm-generative-ai/")
def update_docs_database_cli(documentation_url: str):
    """
    Updates the PINECONE database with new documents when called. It expects the document structure to be
    generated by Sphinx.
    :param documentation_url: Optional argument if the url changes. defaults to https://ibm.github.io/ibm-generative-ai/
    """
    update_docs_database(documentation_url)


@cli.command("start-chat")
@click.option("--verbose", type=bool, default="False", help="Verbosity of chain of though")
def start_chat_cli(verbose: bool):
    """
    Starts an interactive chat with the agent in the terminal. To exit the chat, type "exit", to reset the memory
    type "reset".
    """

    welcome_ai_message = " Hello, I'm a cli helpful assistant that can answer questions from the documentation. " \
                         "I can search internet for you and execute python code!"
    # memory setup with resetting button.
    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True,
                                      output_key="output")
    orchestrator_agent = setup_agents_and_tools(memory)

    print(welcome_ai_message)
    while True:
        print("\n Continue by writing your question or request below, type 'exit' to quit and 'reset' to reset the "
              "memory")
        user_input = input()
        if user_input == "exit":
            break
        elif user_input == "reset":
            memory.clear()
        else:
            invoke_cli_response(orchestrator_agent, user_input, verbose)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    cli()
